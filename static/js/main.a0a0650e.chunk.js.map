{"version":3,"sources":["PreviousNotes.js","NoteCard.js","App.js","serviceWorker.js","index.js"],"names":["OldNotes","props","rows","notes","map","row","index","Card","className","Header","as","title","Button","onClick","removeNote","variant","Body","Text","contents","PrevNotes","Container","CardDeck","NoteCard","useState","setTitle","setContents","handleChange","event","target","name","value","console","log","InputGroup","FormControl","type","id","placeholder","onChange","submission","handleAddNote","App","state","setState","filter","rowIndex","note","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0VAuBMA,EAAW,SAAAC,GACb,IAAMC,EAAOD,EAAME,MAAMC,KACrB,SAACC,EAAKC,GACF,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,oBACZ,kBAACD,EAAA,EAAKE,OAAN,CAAaC,GAAG,MACZ,8BAAOL,EAAIM,OACX,kBAACC,EAAA,EAAD,CAAQJ,UAAU,mBAAmBK,QAAS,kBAAMZ,EAAMa,WAAWR,IAAQS,QAAQ,kBAArF,gBAIJ,kBAACR,EAAA,EAAKS,KAAN,KACI,kBAACT,EAAA,EAAKU,KAAN,KACKZ,EAAIa,eAO7B,OAAO,6BAAMhB,IAGFiB,EArCG,SAAAlB,GAAU,IAChBE,EAAsBF,EAAtBE,MAAOW,EAAeb,EAAfa,WAEf,OACI,kBAACM,EAAA,EAAD,KACI,wBAAIZ,UAAU,aAAd,cACA,6BACA,kBAACa,EAAA,EAAD,KACI,kBAAC,EAAD,CAAUlB,MAAOA,EAAOW,WAAYA,O,gCCyDrCQ,EAlEE,SAAArB,GAAU,IAAD,EACIsB,mBAAS,IADb,mBACfZ,EADe,KACRa,EADQ,OAEUD,mBAAS,IAFnB,mBAEfL,EAFe,KAELO,EAFK,KAIhBC,EAAe,SAAAC,GAAU,IAAD,EACFA,EAAMC,OAAtBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACd,OAAQD,GACJ,IAAK,QACDL,EAASM,GACT,MACJ,IAAK,WACDL,EAAYK,GACZ,MACJ,QACIC,QAAQC,IAAI,wBAiBxB,OACI,kBAACZ,EAAA,EAAD,KACI,wBAAIZ,UAAU,SAAd,yBACA,kBAACyB,EAAA,EAAD,CAAYzB,UAAU,cAClB,kBAAC0B,EAAA,EAAD,CACI1B,UAAU,aACV2B,KAAK,OACLC,GAAG,QACHP,KAAK,QACLQ,YAAY,aACZP,MAAOnB,EACP2B,SAAUZ,KAIlB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACI1B,UAAU,OACV2B,KAAK,OACLzB,GAAG,WACHR,KAAK,IACL2B,KAAK,WACLQ,YAAY,YACZP,MAAOZ,EACPoB,SAAUZ,KAIlB,kBAACd,EAAA,EAAD,CAAQJ,UAAU,UAAUO,QAAQ,UAAUF,QAxCnC,WACf,GAAIF,GAASO,EAAU,CACnB,IAAMqB,EAAa,CACf,MAAS5B,EACT,SAAYO,GAEhBjB,EAAMuC,cAAcD,GACpBf,EAAS,IACTC,EAAY,OAgCZ,cCzBGgB,E,4MAjCbC,MAAQ,CACNvC,MAAO,I,EAGTW,WAAa,SAAAR,GAAU,IACbH,EAAU,EAAKuC,MAAfvC,MACR,EAAKwC,SAAS,CACZxC,MAAOA,EAAMyC,QACX,SAACvC,EAAKwC,GACJ,OAAOA,IAAavC,Q,EAM5BkC,cAAgB,SAAAM,GACd,EAAKH,SAAS,CACZxC,MAAM,GAAD,mBAAM,EAAKuC,MAAMvC,OAAjB,CAAwB2C,O,uDAIvB,IACA3C,EAAU4C,KAAKL,MAAfvC,MAER,OACE,6BACE,kBAAC,EAAD,CAAUqC,cAAeO,KAAKP,gBAC9B,kBAAC,EAAD,CAAWrC,MAAOA,EAAOW,WAAYiC,KAAKjC,kB,GA5BhCkC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.a0a0650e.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport './PreviousNotes.css';\n\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nconst PrevNotes = props => {\n    const { notes, removeNote } = props;\n\n    return (\n        <Container>\n            <h2 className=\"YourNotes\">Your Notes</h2>\n            <hr />\n            <CardDeck>\n                <OldNotes notes={notes} removeNote={removeNote} />\n            </CardDeck>\n        </Container>\n    );\n};\n\nconst OldNotes = props => {\n    const rows = props.notes.map(\n        (row, index) => {\n            return (\n                <Card className=\"DeleteNoteButton\">\n                    <Card.Header as=\"h4\">\n                        <span>{row.title}</span>\n                        <Button className=\"DeleteNoteButton\" onClick={() => props.removeNote(index)} variant=\"outline-danger\">\n                            Delete note\n            </Button>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>\n                            {row.contents}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            )\n        }\n    );\n    return <div>{rows}</div>;\n};\n\nexport default PrevNotes;","import React, { useState } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport './NoteCard.css';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\n\nconst NoteCard = props => {\n    const [title, setTitle] = useState('');\n    const [contents, setContents] = useState('');\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'title':\n                setTitle(value);\n                break;\n            case 'contents':\n                setContents(value);\n                break;\n            default:\n                console.log(\"change not handled\");\n                break;\n        }\n    };\n\n    const sumbitForm = () => {\n        if (title && contents) {\n            const submission = {\n                'title': title,\n                'contents': contents\n            };\n            props.handleAddNote(submission);\n            setTitle('');\n            setContents('');\n        }\n    };\n\n    return (\n        <Container>\n            <h1 className=\"Title\">Your custom notes app</h1>\n            <InputGroup className=\"Note Title\">\n                <FormControl\n                    className=\"Note Title\"\n                    type=\"text\"\n                    id=\"title\"\n                    name=\"title\"\n                    placeholder=\"Note Title\"\n                    value={title}\n                    onChange={handleChange}\n                />\n            </InputGroup>\n\n            <InputGroup>\n                <FormControl\n                    className=\"Text\"\n                    type=\"text\"\n                    as=\"textarea\"\n                    rows=\"6\"\n                    name=\"contents\"\n                    placeholder=\"Note Text\"\n                    value={contents}\n                    onChange={handleChange}\n                />\n            </InputGroup>\n\n            <Button className=\"AddNote\" variant=\"primary\" onClick={sumbitForm}>\n                Add Note\n      </Button>\n        </Container>\n    );\n};\n\nexport default NoteCard;","import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport PrevNotes from './PreviousNotes.js';\nimport NoteCard from './NoteCard.js';\n\n\nclass App extends Component {\n  state = {\n    notes: []\n  };\n\n  removeNote = index => {\n    const { notes } = this.state;\n    this.setState({\n      notes: notes.filter(\n        (row, rowIndex) => {\n          return rowIndex !== index;\n        }\n      )\n    });\n  };\n\n  handleAddNote = note => {\n    this.setState({\n      notes: [...this.state.notes, note]\n    });\n  };\n\n  render() {\n    const { notes } = this.state;\n\n    return (\n      <div>\n        <NoteCard handleAddNote={this.handleAddNote} />\n        <PrevNotes notes={notes} removeNote={this.removeNote} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}